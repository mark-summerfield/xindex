#!/usr/bin/env python3
# Copyright Â© 2015-20 Qtrac Ltd. All rights reserved.

import copy
import html
import re
import sys

from Const import EN_DASH, FileKind, UTF8


RTF_RX = re.compile(r"([\x00-\x1F\\{}\x80-\uFFFF])")


MarkupForExtension = {}


class Markup:

    def __init__(self, kind):
        self.kind = kind


    def _dump(self, file=sys.stdout):
        for key in dir(self):
            if not key.startswith("_"):
                value = getattr(self, key, None)
                if not callable(value):
                    print("{}: {!r}".format(key, value), file=file)


def user_markup():
    markup = Markup(FileKind.USER)
    markup.escapefunction = "html"
    markup.DocumentStart = ""
    markup.DocumentEnd = ""
    markup.Note = ""
    markup.SectionStart = ""
    markup.SectionEnd = "{nl}"
    markup.MainStart = ""
    markup.MainEnd = "{nl}"
    markup.Sub1Start = ""
    markup.Sub1End = "{nl}"
    markup.Sub2Start = ""
    markup.Sub2End = "{nl}"
    markup.Sub3Start = ""
    markup.Sub3End = "{nl}"
    markup.Sub4Start = ""
    markup.Sub4End = "{nl}"
    markup.Sub5Start = ""
    markup.Sub5End = "{nl}"
    markup.Sub6Start = ""
    markup.Sub6End = "{nl}"
    markup.Sub7Start = ""
    markup.Sub7End = "{nl}"
    markup.Sub8Start = ""
    markup.Sub8End = "{nl}"
    markup.Sub9Start = ""
    markup.Sub9End = "{nl}"
    markup.Encoding = UTF8
    markup.RangeSeparator = EN_DASH
    markup.Tab = "\t"
    markup.Newline = "\n"
    markup.AltFontStart = ""
    markup.AltFontEnd = ""
    markup.MonoFontStart = ""
    markup.MonoFontEnd = ""
    markup.StdFontStart = ""
    markup.StdFontEnd = ""
    markup.BoldStart = ""
    markup.BoldEnd = ""
    markup.ItalicStart = ""
    markup.ItalicEnd = ""
    markup.SubscriptEnd = ""
    markup.SubscriptStart = ""
    markup.SuperscriptEnd = ""
    markup.SuperscriptStart = ""
    markup.UnderlineStart = ""
    markup.UnderlineEnd = ""
    markup.StrikeoutStart = ""
    markup.StrikeoutEnd = ""
    return markup


def unicode_to_rtf(text):
    def escape(match):
        c = match.group(1)
        if c == EN_DASH:
            return r"\endash "
        elif c == "\u2018":
            return r"\lquote "
        elif c == "\u2019":
            return r"\rquote "
        elif c == "\u201C":
            return r"\ldblquote "
        elif c == "\u2019":
            return r"\rdblquote "
        x = ord(c)
        return r"\u{}?".format(x > 32767 and x - 65536 or x)
    return RTF_RX.sub(escape, text)


# .txt
markup = Markup(FileKind.TXT)
markup.escape = lambda x: x
markup.DocumentStart = "{bom}Title: {title}{nl}"
markup.DocumentEnd = ""
markup.Note = "Note: {note}{nl}"
markup.SectionStart = ""
markup.SectionEnd = "{nl}"
markup.MainStart = ""
markup.MainEnd = "{nl}"
markup.Sub1Start = "{indent}"
markup.Sub1End = "{nl}"
markup.Sub2Start = "{indent}"
markup.Sub2End = "{nl}"
markup.Sub3Start = "{indent}"
markup.Sub3End = "{nl}"
markup.Sub4Start = "{indent}"
markup.Sub4End = "{nl}"
markup.Sub5Start = "{indent}"
markup.Sub5End = "{nl}"
markup.Sub6Start = "{indent}"
markup.Sub6End = "{nl}"
markup.Sub7Start = "{indent}"
markup.Sub7End = "{nl}"
markup.Sub8Start = "{indent}"
markup.Sub8End = "{nl}"
markup.Sub9Start = "{indent}"
markup.Sub9End = "{nl}"
markup.Encoding = UTF8
markup.RangeSeparator = EN_DASH
markup.Tab = "\t"
markup.Newline = "\n"
markup.AltFontStart = ""
markup.AltFontEnd = ""
markup.MonoFontStart = ""
markup.MonoFontEnd = ""
markup.StdFontStart = ""
markup.StdFontEnd = ""
markup.BoldStart = ""
markup.BoldEnd = ""
markup.ItalicStart = ""
markup.ItalicEnd = ""
markup.SubscriptEnd = ""
markup.SubscriptStart = ""
markup.SuperscriptStart = ""
markup.SuperscriptEnd = ""
markup.UnderlineStart = ""
markup.UnderlineEnd = ""
markup.StrikeoutStart = ""
markup.StrikeoutEnd = ""
MarkupForExtension[".txt"] = markup

# .html
markup = Markup(FileKind.HTML)
markup.escape = html.escape
markup.DocumentStart = """<html>
    <!-- Generated by XindeX {version} for {creator} on {date} -->
    <head>
        <meta http-equiv="Content-Type" content="text/html; \
charset={encoding}"/>
        <title>{plaintitle}</title>
    </head>
    <style>
    p {{ font-family: "{stdfont}"; font-size: "{stdfontsize}pt"; }}
    h2 {{ font-family: "{sectfont}"; font-size: "{sectfontsize}pt"; }}
    .hi0 {{ padding-left: 3em; text-indent: -3em; }}
    .hi1 {{ padding-left: 5em; text-indent: -3em; }}
    .hi2 {{ padding-left: 7em; text-indent: -3em; }}
    .hi3 {{ padding-left: 9em; text-indent: -3em; }}
    .hi4 {{ padding-left: 11em; text-indent: -3em; }}
    .hi5 {{ padding-left: 13em; text-indent: -3em; }}
    .hi6 {{ padding-left: 15em; text-indent: -3em; }}
    .hi7 {{ padding-left: 17em; text-indent: -3em; }}
    .hi8 {{ padding-left: 19em; text-indent: -3em; }}
    .hi9 {{ padding-left: 21em; text-indent: -3em; }}
    </style>
<body>
<h1>{title}</h1>
"""
markup.DocumentEnd = "</body></html>"
markup.Note = "<h2>Note</h2>\n<p>{note}</p>\n"
markup.SectionStart = "<h2>"
markup.SectionEnd = "</h2>{nl}"
markup.MainStart = '<p class="hi0"><!-- main -->'
markup.MainEnd = "</p><!-- main -->{nl}"
markup.Sub1Start = '<p class="hi1"><!-- sub1 -->'
markup.Sub1End = "</p><!-- sub1 -->{nl}"
markup.Sub2Start = '<p class="hi2"><!-- sub2 -->'
markup.Sub2End = "</p><!-- sub2 -->{nl}"
markup.Sub3Start = '<p class="hi3"><!-- sub3 -->'
markup.Sub3End = "</p><!-- sub3 -->{nl}"
markup.Sub4Start = '<p class="hi4"><!-- sub4 -->'
markup.Sub4End = "</p><!-- sub4 -->{nl}"
markup.Sub5Start = '<p class="hi5"><!-- sub5 -->'
markup.Sub5End = "</p><!-- sub5 -->{nl}"
markup.Sub6Start = '<p class="hi6"><!-- sub6 -->'
markup.Sub6End = "</p><!-- sub6 -->{nl}"
markup.Sub7Start = '<p class="hi7"><!-- sub7 -->'
markup.Sub7End = "</p><!-- sub7 -->{nl}"
markup.Sub8Start = '<p class="hi8"><!-- sub8 -->'
markup.Sub8End = "</p><!-- sub8 -->{nl}"
markup.Sub9Start = '<p class="hi9"><!-- sub9 -->'
markup.Sub9End = "</p><!-- sub9 -->{nl}"
markup.Encoding = UTF8
markup.RangeSeparator = EN_DASH
# If present, overrides the indent set in the user interface
markup.Indent = "&nbsp;&nbsp;&nbsp;&nbsp;"
markup.Tab = "&nbsp;&nbsp;&nbsp;&nbsp;"
markup.Newline = "<p></p>"
markup.AltFontStart = """<span style="font-family: '{family}'; \
font-size: {size};">"""
markup.AltFontEnd = "</span>"
markup.MonoFontStart = """<span style="font-family: '{family}'; \
font-size: {size};">"""
markup.MonoFontEnd = "</span>"
markup.StdFontStart = """<span style="font-family: '{family}'; \
font-size: {size};">"""
markup.StdFontEnd = "</span>"
markup.BoldStart = "<b>"
markup.BoldEnd = "</b>"
markup.ItalicStart = "<i>"
markup.ItalicEnd = "</i>"
markup.SubscriptStart = "<sub>"
markup.SubscriptEnd = "</sub>"
markup.SuperscriptStart = "<sup>"
markup.SuperscriptEnd = "</sup>"
markup.UnderlineStart = "<u>"
markup.UnderlineEnd = "</u>"
markup.StrikeoutStart = "<s>"
markup.StrikeoutEnd = "</s>"
MarkupForExtension[".htm"] = markup
MarkupForExtension[".html"] = markup
MarkupForExtension[".pdf"] = copy.deepcopy(markup)
MarkupForExtension[".pdf"].kind = FileKind.PDF
MarkupForExtension[".$$$"] = copy.deepcopy(markup)
MarkupForExtension[".$$$"].kind = FileKind.PRINT

# .rtf
markup = Markup(FileKind.RTF)
markup.escape = unicode_to_rtf
markup.DocumentStart = r"""{{\rtf1\ansi\deff0
{{\fonttbl
    {{\f0 {stdfont};}}
    {{\f1 {altfont};}}
    {{\f2 {monofont};}}
}}
{{\header\pard\qr\plain\f0\chpgn\par}}
{{\info{{\title XindeX {version}}}{{\author {creator}}}}}
{{\pard\qc {title}\par}}
{{\pard\par}}
"""
markup.DocumentEnd = "}}{nl}"
markup.Note = r"{{\pard {note}\par}}{nl}"
markup.SectionStart = r"{{\pard\b\f{fnum}\fs{size}{nl}"
markup.SectionEnd = r"\par}}{nl}"
markup.MainStart = r"{{\pard\f0\fs{size}\fi-1000\li1000\v main\v0 "
markup.MainEnd = r"\v main\v0\par}}{nl}"
markup.Sub1Start = r"{{\pard\f0\fs{size}\fi-1000\li1400\v sub1\v0 "
markup.Sub1End = r"\v sub1\v0\par}}{nl}"
markup.Sub2Start = r"{{\pard\f0\fs{size}\fi-1000\li1800\v sub2\v0 "
markup.Sub2End = r"\v sub2\v0\par}}{nl}"
markup.Sub3Start = r"{{\pard\f0\fs{size}\fi-1000\li2200\v sub3\v0 "
markup.Sub3End = r"\v sub3\v0\par}}{nl}"
markup.Sub4Start = r"{{\pard\f0\fs{size}\fi-1000\li2600\v sub4\v0 "
markup.Sub4End = r"\v sub4\v0\par}}{nl}"
markup.Sub5Start = r"{{\pard\f0\fs{size}\fi-1000\li3000\v sub5\v0 "
markup.Sub5End = r"\v sub5\v0\par}}{nl}"
markup.Sub6Start = r"{{\pard\f0\fs{size}\fi-1000\li3400\v sub6\v0 "
markup.Sub6End = r"\v sub6\v0\par}}{nl}"
markup.Sub7Start = r"{{\pard\f0\fs{size}\fi-1000\li3800\v sub7\v0 "
markup.Sub7End = r"\v sub7\v0\par}}{nl}"
markup.Sub8Start = r"{{\pard\f0\fs{size}\fi-1000\li4200\v sub8\v0 "
markup.Sub8End = r"\v sub8\v0\par}}{nl}"
markup.Sub9Start = r"{{\pard\f0\fs{size}\fi-1000\li4600\v sub9\v0 "
markup.Sub9End = r"\v sub9\v0\par}}{nl}"
markup.Encoding = "ASCII"
markup.RangeSeparator = r"\endash "
# If present, overrides the indent set in the user interface
markup.Indent = r"    "
markup.Tab = r"\tab "
markup.Newline = r"{{\pard\par}}"
markup.AltFontStart = r"\f1\fs{size} "
markup.AltFontEnd = r"\f0\fs{size} "
markup.MonoFontStart = r"\f2\fs{size} "
markup.MonoFontEnd = r"\f0\fs{size} "
markup.StdFontStart = r"\f0\fs{size} "
markup.StdFontEnd = ""
markup.BoldStart = r"\b "
markup.BoldEnd = r"\b0 "
markup.ItalicStart = r"\i "
markup.ItalicEnd = r"\i0 "
markup.SubscriptStart = r"\sub "
markup.SubscriptEnd = r"\sub0\plain "
markup.SuperscriptStart = r"\super "
markup.SuperscriptEnd = r"\super0\plain "
markup.UnderlineStart = r"\ul "
markup.UnderlineEnd = r"\ul0 "
markup.StrikeoutStart = r"\strike "
markup.StrikeoutEnd = r"\strike0 "
MarkupForExtension[".rtf"] = markup

# .docx
markup = Markup(FileKind.DOCX)
markup.escape = html.escape
markup.DocumentStart = """\
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\
<w:document xmlns:w="http://schemas.openxmlformats.\
org/wordprocessingml/2006/main">\
<w:body><w:p><w:pPr><w:jc w:val="center"/></w:pPr><w:r><w:t>\
{title}</w:t></w:r></w:p><w:p><w:br/></w:p>"""
markup.DocumentEnd = "</w:body></w:document>"
markup.Note = """\
<w:p><w:pPr><w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><w:r><w:t xml:space="preserve">\
{note}</w:t></w:r></w:p>"""
markup.SectionStart = """\
<w:p><w:pPr><w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><w:r><w:t xml:space="preserve">"""
markup.SectionEnd = "</w:t></w:r></w:p>"
markup.MainStart = """\
<w:p><w:pPr><w:ind w:left="1000" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- main -->\
<w:r><w:t xml:space="preserve">"""
markup.MainEnd = """</w:t></w:r></w:p><!-- main -->"""
markup.Sub1Start = """\
<w:p><w:pPr><w:ind w:left="1400" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub1 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub1End = "</w:t></w:r></w:p><!-- sub1 -->"
markup.Sub2Start = """\
<w:p><w:pPr><w:ind w:left="1800" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub2 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub2End = "</w:t></w:r></w:p><!-- sub2 -->"
markup.Sub3Start = """\
<w:p><w:pPr><w:ind w:left="2200" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub3 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub3End = "</w:t></w:r></w:p><!-- sub3 -->"
markup.Sub4Start = """\
<w:p><w:pPr><w:ind w:left="2600" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub4 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub4End = "</w:t></w:r></w:p><!-- sub4 -->"
markup.Sub5Start = """\
<w:p><w:pPr><w:ind w:left="3000" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub5 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub5End = "</w:t></w:r></w:p><!-- sub5 -->"
markup.Sub6Start = """\
<w:p><w:pPr><w:ind w:left="3400" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub6 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub6End = "</w:t></w:r></w:p><!-- sub6 -->"
markup.Sub7Start = """\
<w:p><w:pPr><w:ind w:left="3800" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub7 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub7End = "</w:t></w:r></w:p><!-- sub7 -->"
markup.Sub8Start = """\
<w:p><w:pPr><w:ind w:left="4200" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub8 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub8End = "</w:t></w:r></w:p><!-- sub8 -->"
markup.Sub9Start = """\
<w:p><w:pPr><w:ind w:left="4600" w:hanging="1000"/>\
<w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr></w:pPr><!-- sub9 -->\
<w:r><w:t xml:space="preserve">"""
markup.Sub9End = "</w:t></w:r></w:p><!-- sub9 -->"
markup.Encoding = UTF8
markup.RangeSeparator = EN_DASH
# If present, overrides the indent set in the user interface
markup.Indent = "    "
markup.Tab = "\t"
markup.Newline = "<w:p><w:br/></w:p>"
markup.AltFontStart = """\
</w:t></w:r><w:r><w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr><w:t xml:space="preserve">"""
markup.AltFontEnd = "</w:t></w:r><w:r><w:t>"
markup.MonoFontStart = """\
</w:t></w:r><w:r><w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr><w:t xml:space="preserve">"""
markup.MonoFontEnd = "</w:t></w:r><w:r><w:t>"
markup.StdFontStart = """\
</w:t></w:r><w:r><w:rPr><w:rFonts w:ascii="{family}" w:hAnsi="{family}"/>\
<w:sz w:val="{size}"/></w:rPr><w:t xml:space="preserve">"""
markup.StdFontEnd = "</w:t></w:r><w:r><w:t>"
markup.BoldStart = """\
</w:t></w:r><w:r><w:rPr><w:b/></w:rPr><w:t xml:space="preserve">"""
markup.BoldEnd = "</w:t></w:r><w:r><w:t>"
markup.ItalicStart = """\
</w:t></w:r><w:r><w:rPr><w:i/></w:rPr><w:t xml:space="preserve">"""
markup.ItalicEnd = "</w:t></w:r><w:r><w:t>"
markup.SubscriptStart = """\
</w:t></w:r><w:r><w:rPr><vertAlign w:val="subscript"/>\
</w:rPr><w:t xml:space="preserve">"""
markup.SubscriptEnd = "</w:t></w:r><w:r><w:t>"
markup.SuperscriptStart = """\
</w:t></w:r><w:r><w:rPr><vertAlign w:val="superscript"/>\
</w:rPr><w:t xml:space="preserve">"""
markup.SuperscriptEnd = "</w:t></w:r><w:r><w:t>"
markup.UnderlineStart = """\
</w:t></w:r><w:r><w:rPr><w:u w:val="single"/>\
</w:rPr><w:t xml:space="preserve">"""
markup.UnderlineEnd = "</w:t></w:r><w:r><w:t>"
markup.StrikeoutStart = """\
</w:t></w:r><w:r><w:rPr><w:strike w:val="true"/>\
</w:rPr><w:t xml:space="preserve">"""
markup.StrikeoutEnd = "</w:t></w:r><w:r><w:t>"
MarkupForExtension[".docx"] = markup
